%%
headers
#include <Python.h>
#define NO_IMPORT_PYGOBJECT
#include "pygobject.h"
#include "../../opensim-variable.h"
#include "../../opensim-simulator.h"

/* from pygoocanvas 0.10.0 */
static PyObject *
_glist_to_pylist_objs (GList *source)
{
    GList *iter;
    PyObject *dest = PyList_New (0);
    for (iter = source; iter != NULL; iter = iter->next)
    {
        PyObject *item = pygobject_new ((GObject *)iter->data);
        PyList_Append (dest, item);
        Py_DECREF (item);
    }
    return dest;
}
%%
modulename opensim.engine
%%
import gobject.GObject as PyGObject_Type
%%
ignore-glob
  *_get_type
%%
override opensim_variable_get_influences noargs
static PyObject *
_wrap_opensim_variable_get_influences (PyGObject *self)
{
  OpensimVariable *var = OPENSIM_VARIABLE (self->obj);
  PyObject *ret;
  
  GList *influences = opensim_variable_get_influences (var);
  
  
  if (!influences)
  {
    Py_INCREF (Py_None);
    return Py_None;
  }
    
  ret = _glist_to_pylist_objs (influences);
  g_list_free (influences);
  return ret;
}
%%
override-attr OpensimVariable.equation
static int
_wrap_opensim_variable__set_equation(PyGObject *self, PyObject *py_value, void *closure)
{
  if (!PyObject_IsInstance(py_value, (PyObject*) &PyString_Type)) {
    PyErr_SetString(PyExc_TypeError, "value must be a string");
    return -1;
  }
  OpensimVariable *var = OPENSIM_VARIABLE (pygobject_get (self));
  g_object_set (var, "equation", PyString_AsString (py_value), NULL);

  return 0;
}
static PyObject*
_wrap_opensim_variable__get_equation(PyGObject *self, void *closure)
{
  OpensimVariable *var = OPENSIM_VARIABLE (pygobject_get (self));

  gchar *eqn = NULL;

  g_object_get (var, "equation", &eqn, NULL);

  PyObject *py_eqn = PyString_FromString (eqn);

  g_free (eqn);

  return py_eqn;
}
%%
override opensim_simulator_get_variables noargs
static PyObject *
_wrap_opensim_simulator_get_variables (PyGObject *self)
{
  OpensimSimulator *sim = OPENSIM_SIMULATOR (self->obj);
  PyObject *ret;
  
  GList *vars = opensim_simulator_get_variables (sim);
  
  
  if (!vars)
  {
    Py_INCREF (Py_None);
    return Py_None;
  }
    
  ret = _glist_to_pylist_objs (vars);
  g_list_free (vars);
  return ret;
}

