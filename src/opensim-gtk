#!/usr/bin/env python
#===--- opensim-gtk - OpenSim GTK GUI -------------------------------------===#
#
# Copyright 2008 Bobby Powers
#
# This file is part of OpenSim.
# 
# OpenSim is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# OpenSim is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with OpenSim.  If not, see <http://www.gnu.org/licenses/>.
#
#===-----------------------------------------------------------------------===#
#
# This file contains the GTK graphical interface to OpenSim.
#
#===-----------------------------------------------------------------------===#


import pygtk
pygtk.require("2.0")

import os, sys, gtk, gtk.glade, gobject, goocanvas, math
import logging
import opensim.visuals as sim


class OpenSimGTK(gtk.Window):

  def drawing_tool_toggled(self, widget):

    # if a widget is being un-toggled, then we don't have
    # to worry about it (otherwise breaks toggle effect)
    if widget.get_active() == False:
      # make sure we catch the case where no tool is active.
      if widget.type == self.canvas.get_active_tool():
        self.canvas.set_active_tool(sim.NONE)
      return

    # switch between possible widgets.
    if widget.type != sim.VARIABLE:
      self.button_variable.set_active(False)    
    if widget.type != sim.INFLUENCE:
      self.button_influence.set_active(False)
    if widget.type != sim.STOCK:
      self.button_stock.set_active(False)
    if widget.type != sim.FLOW:
      self.button_flow.set_active(False)

    # let the canvas know what tool is active
    self.canvas.set_active_tool(widget.type)


  def __init__(self, **kwargs):
    super(OpenSimGTK, self).__init__(**kwargs)

    self.file_path = None

    # http://standards.freedesktop.org/basedir-spec/basedir-spec-0.6.html
    share_paths = ('/usr/local/share/', '/usr/share/')
    all_paths = share_paths

    # check this environmental variable, but if nothing is there fall 
    # back to the ones in share_paths
    if os.environ.has_key('XDG_DATA_DIRS'):
      xdg_string = environ['XDG_DATA_DIRS']
      all_paths = xdg_string.split(':').append(share_paths)

    logging.debug('search paths')
    for i, path in enumerate(all_paths):
      path = os.path.join(path, "opensim")
      logging.debug('\t%d: %s' % (i, path))
      if os.path.exists(path):
        self.file_path = path
        break

    if self.file_path is None:
      logging.error("no data directory found.")
      raise Exception

    self

    #Set and load the Glade file
    self.gladefile = os.path.join(self.file_path, "opensim-main.glade")
    self.wTree = gtk.glade.XML(self.gladefile) 

    #Get the Main Window, and connect the "destroy" event
    self.window = self.wTree.get_widget("main_window")

    dic = {"on_drawing_tool_toggled" : self.drawing_tool_toggled, 
           "on_open" : self.open_clicked,
           "on_save" : self.save_clicked,
           "on_save_as" : self.save_as_clicked,
           "on_main_window_destroy" : gtk.main_quit, 
           "on_file_quit" : gtk.main_quit}
    self.wTree.signal_autoconnect(dic)
    
    #Get our 4 buttons & add type attributes to them
    self.button_variable = self.wTree.get_widget("but_variable")
    self.button_variable.type = sim.VARIABLE
    self.button_influence = self.wTree.get_widget("but_influence")
    self.button_influence.type = sim.INFLUENCE
    self.button_stock = self.wTree.get_widget("but_stock")
    self.button_stock.type = sim.STOCK
    self.button_flow = self.wTree.get_widget("but_flow")
    self.button_flow.type = sim.FLOW

    #insert our goocanvas (since I don't want to deal with 
    #getting it working with glade just yet...)
    main_vbox = self.wTree.get_widget("main_vbox")
    main_tool_bar = self.wTree.get_widget("main_tool_bar")

    self.canvas = sim.Canvas()
    self.status_bar = gtk.Statusbar()

    main_vbox.pack_start(self.canvas, True, True, 0)
    main_vbox.pack_start(self.status_bar, False, False, 0)

    self.canvas.show()
    self.status_bar.show()


  def create_dialog(self, requested_title, requested_action):
    dialog = gtk.FileChooserDialog(title=requested_title,
                                   action=requested_action,
                                   buttons=(gtk.STOCK_CANCEL,
                                            gtk.RESPONSE_CANCEL,
                                            gtk.STOCK_OPEN,gtk.RESPONSE_OK))
    dialog.set_default_response(gtk.RESPONSE_OK)
   
    filter = gtk.FileFilter()
    filter.set_name("Models")
    filter.add_pattern("*.osm")
    filter.add_pattern("*.mdl")
    dialog.add_filter(filter)

    filter = gtk.FileFilter()
    filter.set_name("All files")
    filter.add_pattern("*")
    dialog.add_filter(filter)   

    return_val = None   
    response = dialog.run()
    if response == gtk.RESPONSE_OK:
      return_val = dialog.get_filename()

    dialog.destroy()
    return return_val


  def open_clicked(self, widget):
    model_file = self.create_dialog("Open Existing Model...",
                                    gtk.FILE_CHOOSER_ACTION_OPEN)
    if model_file:
      self.file_path = model_file
      self.read_file(self.file_path)


  def save_clicked(self, widget):
    if self.file_path:
      self.write_file(self.file_path)
    else:
      self.save_as_clicked(self)


  def save_as_clicked(self, widget):
    model_file = self.create_dialog("Save Model As...",
                                    gtk.FILE_CHOOSER_ACTION_SAVE)
    if model_file:
      self.file_path = model_file
      self.write_file(self.file_path)


  def write_file(self, file_path):
    '''
    Implement this method to save your activity's state.
    '''
    logging.debug('opensim-gtk: writing file')
    self.canvas.save_model(file_path)
    logging.debug('opensim-gtk: done writing file')

    
  def read_file(self, file_path):
    '''
    Implement this method to resume state saved in write_file().
    '''
    logging.debug('opensim-gtk: reading file')
    self.canvas.open_model(file_path)
    logging.debug('opensim-gtk: done reading file')


  def main(self):
    gtk.main()



gobject.type_register(OpenSimGTK)


if __name__ == "__main__":
  logging.basicConfig(level=logging.DEBUG)
  gui = OpenSimGTK()
  gui.main()

