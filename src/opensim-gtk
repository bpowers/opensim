#!/usr/bin/env python
#===--- opensim-gtk - OpenSim GTK GUI -------------------------------------===#
#
# Copyright 2008 Bobby Powers
#
# This file is part of OpenSim.
# 
# OpenSim is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# OpenSim is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with OpenSim.  If not, see <http://www.gnu.org/licenses/>.
#
#===-----------------------------------------------------------------------===#
#
# This file contains the GTK graphical interface to OpenSim.
#
#===-----------------------------------------------------------------------===#


import pygtk
pygtk.require ("2.0")
import gtk
import gobject

import os
import os.path
import sys
import math
import logging

import opensim
import opensim.visuals as sim
import opensim.visuals.tools as tools

log = logging.getLogger('opensim.gtk')

# mac-native gtk doesn't like svg icons
ICON_NAME = 'model-icon'
ICON_SUFFIX = '.png'
if sys.platform == 'darwin':
  import igemacintegration as mac
elif sys.platform == 'linux2':
  ICON_SUFFIX = '.svg'

ICON_NAME += ICON_SUFFIX

main_menu = '''
<ui>
  <menubar name="MainMenu">
    <menu action="File">
      <menuitem action="New"/>
      <menuitem action="Open"/>
      <separator/>
      <menuitem action="Save"/>
      <menuitem action="SaveAs"/>
      <separator/>
      <menuitem action="Quit"/>
    </menu>
    <menu action="Edit">
      <menuitem action="Undo"/>
      <menuitem action="Redo"/>
    </menu>
    <menu action="Tools">
    </menu>
    <menu action="Help">
      <menuitem action="About"/>
    </menu>
  </menubar>
</ui>
'''


class OpenSimGTK (gobject.GObject):

  __gtype_name__ = 'OpenSimGTK'

  def __init__ (self, **kwargs):
    super(OpenSimGTK, self).__init__ (**kwargs)

    # this is for the SAVE file, not the data directory
    self.file_path = None
    self.data_path = None

    # http://standards.freedesktop.org/basedir-spec/basedir-spec-0.6.html
    share_paths = ['/usr/local/share/', '/usr/share/']
    all_paths = share_paths

    # check this environmental variable, but if nothing is there fall 
    # back to the ones in share_paths
    if os.environ.has_key('XDG_DATA_DIRS'):
      xdg_string = os.environ['XDG_DATA_DIRS']
      all_paths = xdg_string.split(':')
      all_paths.extend(share_paths)

    for path in all_paths:
      path = os.path.join(path, 'opensim')
      if os.path.exists(path):
        self.data_path = path
        break

    if self.data_path is None:
      if sys.platform == 'win32':
        self.data_path = '.'
      elif sys.platform == 'darwin':
        # if we're on the mac and we get here, we're most likely in an
        # application bundle.  We need to make sure we can get our 
        # icons and glade files.
        # we want to strip MacOS/Model...
        self.data_path = os.path.dirname(os.path.dirname(sys.argv[0]))
        self.data_path = os.path.join(self.data_path, 'Resources')
        log.debug("current working directory: %s" % self.data_path)
      else:
        log.error('no data directory found.')
        raise ValueError

    # I may have to investigate whether we're installing icons into
    # the recommended directory, but for now this works well.
    icon_path = os.path.join(self.data_path, 'icons')
    gtk.icon_theme_get_default().append_search_path(icon_path)
    log.debug("setting icon theme path: %s" % icon_path)

    #Get the Main Window, and connect the "destroy" event
    self.window = gtk.Window()
    self.window.set_icon_from_file(os.path.join(self.data_path, 
                                                ICON_NAME))
    self.window.set_title('new simulation | Model')
    self.window.set_size_request(800, 600)
    self.window.connect('delete_event', self.delete_event)

    self.main_vbox = gtk.VBox()
    self.window.add(self.main_vbox)

    self.main_menu = self.__build_main_menu()

    self.model_toolbar = tools.ModelToolbar()
    self.model_toolbar.connect_toggled(self.drawing_tool_toggled)
    #self.model_toolbar.append_space()
    self.sim_toolbar = tools.SimulateToolbar()

    self.canvas = sim.Canvas()
    self.status_bar = gtk.Statusbar()
    self.graphs = sim.GraphViewer()

    self.toolbars = gtk.HBox()
    self.main_vbox.pack_start(self.main_menu, False)
    self.main_vbox.pack_start(self.toolbars, False)
    self.toolbars.homogeneous = False
    self.toolbars.pack_start(self.model_toolbar)
    #self.toolbars.pack_start(self.sim_toolbar)
    self.main_vbox.pack_start(self.canvas)
    self.main_vbox.pack_start(self.status_bar, False)

    if sys.platform == 'darwin':
      self.mac_menu = mac.MacMenu()
      self.mac_menu.set_menu_bar(self.main_menu)
      self.main_vbox.remove(self.main_menu)
      #quit_item = self.wTree.get_widget('imagemenuitem5')
      #self.mac_menu.set_quit_menu_item(quit_item)

    self.main_menu.show()
    self.model_toolbar.show()
    self.sim_toolbar.show()
    self.canvas.show()
    self.toolbars.show()
    self.main_vbox.show()
    self.window.show()
    self.status_bar.show()
    self.canvas.grab_focus()


  def __build_main_menu(self):
    '''
    Construct our main menu (file, edit, etc)
    '''


    ui_manager = gtk.UIManager()
    ui_manager.add_ui_from_string(main_menu)

    ag_menu = gtk.ActionGroup('MainMenus')
    ag_menu.add_actions((('File', None, '_File'),
                         ('Edit', None, '_Edit'),
                         ('Tools', None, '_Tools'),
                         ('Help', None, '_Help'),
                       ))
    ui_manager.insert_action_group(ag_menu, 0)

    ag_file = gtk.ActionGroup('File')
    ag_file.add_actions((('New', gtk.STOCK_NEW, '_New', None,
                          'New simulation', None),
                         ('Open', gtk.STOCK_OPEN, '_Open...', None,
                          'Open existing simulation', self.open_clicked),
                         ('Save', gtk.STOCK_SAVE, '_Save', None,
                          'Save current simulation', self.save_clicked),
                         ('SaveAs', gtk.STOCK_SAVE_AS, '_Save As...', None,
                          'Save under a new name', self.save_as_clicked),
                         ('Quit', gtk.STOCK_QUIT, '_Quit', None,
                          'Quit Model', self.delete_event),
                       ))
    ui_manager.insert_action_group(ag_file, 1)

    ag_edit = gtk.ActionGroup('Edit')
    ag_edit.add_actions((('Undo', gtk.STOCK_UNDO, '_Undo', None,
                          'Undo previous action', None),
                         ('Redo', gtk.STOCK_REDO, '_Redo', None,
                          'Redo the last undone action', None),
                       ))
    ui_manager.insert_action_group(ag_edit, 2)

    ag_help = gtk.ActionGroup('Help')
    ag_help.add_actions((('About', gtk.STOCK_ABOUT, '_About', None,
                          'About OpenSim', self.about_clicked),
                       ))
    ui_manager.insert_action_group(ag_help, 3)

    widget = ui_manager.get_widget('/MainMenu/Edit/Undo')
    widget.set_sensitive(False)
    widget = ui_manager.get_widget('/MainMenu/Edit/Redo')
    widget.set_sensitive(False)

    accel_group = ui_manager.get_accel_group()
    self.window.add_accel_group(accel_group)

    self.ui_manager = ui_manager
    return ui_manager.get_widget('/MainMenu')



  def delete_event(self, widget, event=None):
    '''
    Close the program.
    '''
    gtk.main_quit()
    return False


  def drawing_tool_toggled(self, widget):

    # if a widget is being un-toggled, then we don't have
    # to worry about it (otherwise breaks toggle effect)
    if widget.get_active() is False:
      # make sure we catch the case where no tool is active.
      if widget.type == self.canvas.get_active_tool():
        self.canvas.set_active_tool(sim.NONE)
      return

    # switch between possible widgets.
    if widget.type != sim.VARIABLE:
      self.model_toolbar.variable.set_active(False)    
    if widget.type != sim.INFLUENCE:
      self.model_toolbar.influence.set_active(False)
    if widget.type != sim.STOCK:
      self.model_toolbar.stock.set_active(False)
    if widget.type != sim.FLOW:
      self.model_toolbar.flow.set_active(False)

    # let the canvas know what tool is active
    self.canvas.set_active_tool(widget.type)


  def view_toggled(self, widget):
    # fight infinite loops!
    if widget.get_active() is False:
      return


    if widget is self.view_graphs:
      self.view_var.show()
      self.main_vbox.remove(self.canvas)
      self.main_vbox.pack_start(self.graphs, True, True)
    else:
      self.view_var.hide()
      self.main_vbox.remove(self.graphs)
      self.main_vbox.pack_start(self.canvas, True, True)


  def create_dialog(self, requested_title, requested_action):

    save_or_open = gtk.STOCK_OPEN
    if requested_action is gtk.FILE_CHOOSER_ACTION_SAVE:
      save_or_open = gtk.STOCK_SAVE

    dialog = gtk.FileChooserDialog(title=requested_title,
                                   action=requested_action,
                                   buttons=(gtk.STOCK_CANCEL,
                                            gtk.RESPONSE_CANCEL,
                                            save_or_open,gtk.RESPONSE_OK))
    dialog.set_default_response(gtk.RESPONSE_OK)
   
    filter = gtk.FileFilter()
    filter.set_name("Models")
    filter.add_pattern("*.osm")
    filter.add_pattern("*.mdl")
    dialog.add_filter(filter)

    filter = gtk.FileFilter()
    filter.set_name("All files")
    filter.add_pattern("*")
    dialog.add_filter(filter)   

    return_val = None   
    response = dialog.run()
    if response == gtk.RESPONSE_OK:
      return_val = dialog.get_filename()

    dialog.destroy()
    return return_val


  def about_clicked(self, widget):
    '''
    Pop-up and give focus to an about box.
    '''
    pass


  def open_clicked(self, widget):
    model_file = self.create_dialog("Open Existing Model...",
                                    gtk.FILE_CHOOSER_ACTION_OPEN)
    if model_file:
      self.file_path = model_file
      self.read_file(self.file_path)


  def save_clicked(self, widget):
    if self.file_path:
      self.write_file(self.file_path)
    else:
      self.save_as_clicked(self)


  def save_as_clicked(self, widget):
    model_file = self.create_dialog("Save Model As...",
                                    gtk.FILE_CHOOSER_ACTION_SAVE)
    if model_file:
      self.file_path = model_file
      self.write_file (self.file_path)


  def write_file(self, file_path):
    '''
    Implement this method to save your activity's state.
    '''
    log.debug('writing file')
    self.canvas.save_model(file_path)
    log.debug('done writing file')

    
  def read_file(self, file_path):
    '''
    Implement this method to resume state saved in write_file().
    '''
    log.debug('reading file')
    self.canvas.open_model(file_path)
    log.debug('done reading file')


if __name__ == '__main__':
  opensim.enable_logging()

  gui = OpenSimGTK()
  gtk.main()

