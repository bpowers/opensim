
Kind Individuals;

Kind Rabbits: Individuals;
Kind Foxes: Individuals;

Model<Individuals> Population
{
	Aux initial_population;

	Aux</Time> birth_rate;
	Aux<Time> average_lifespan;

	Flow births = population * birth_rate;
	Flow deaths = population / avg_lifespan;

	Stock population = births - deaths, initial_population;
}

Model<Rabbits> RabbitPopulation: Populaion
{
	Aux carrying_capacity;

	Aux initial_population = 500 Rabbits;
	Aux birth_rate         = 2 Rabbits/year;
	Aux avg_lifespan       = 2 years;
	Aux crowding           = population/carrying_capacity;

	Table effect_of_crowding_on_deaths_lookup = (0, 0.75), (3, 2.5), (6, 6), (8, 11), (10, 20);

	Flow deaths = max(population/avg_lifespan*effect_of_crowding_on_deaths_lookup[crowding],
	                  consumption_of_rabbits);
}

Model<Foxes> FoxPopulation: Population
{
	Aux consumption_of_rabbits;

	Aux initial_population = 30 Foxes;
	Aux birth_rate         = .25 Foxes/year;
	Aux avg_lifespan       = 4 years;
	Aux food_requirements  = 25 Rabbits/year;
	Aux food_availability  = consumption_of_rabbits/population/food_requirements;

	Table mortality_lookup = (0, 20), (.3, 5), (.5, 2), (1, 1), (2, .5);

	Flow deaths = population/avg_lifespan*mortality_lookup[food_availability]
}

Model RabbitFox
{
	sim.integration = "euler";

	time.start      = 0 Years;
	time.end        = 50 Years;
	time.step       = .5 Months;
	time.save_step  = 1 Years;

	RabbitPopulation rabbits;
	FoxPopulation foxes;

	rabbits.carrying_capacity = 500 Rabbits;

	foxes.consumption_of_rabbits = fox_consumption_of_rabbits;
	rabbits.consumption_of_rabbits = fox_consumption_of_rabbits;

	Table fox_rabbit_consumption_lookup  = (0, 0), (1, 1), (2, 2), (6, 2);

	Aux fox_consumption_of_rabbits = foxes.population * foxes.food_requirements *
                                         fox_rabbit_consumption_lookup[rabbits.crowding];
}
